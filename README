/*********************************************************
 * Comp 15 Project 2: grep
 * Ellen Zhao
 *
 * Author: Matias Korman
 *
 *********************************************************/

This homework assignment contains some files that can be helpful towards implementing project 2

I got my desgin checked off by Radhika.

FSTree.h                : interface of FSTree class  (used to explore file directories)
FSTree.o                : compiled version of FSTree.cpp
DirNode.h               : interface of DirNode class (nodes used in FSTree)
DirNode.o               : compiled version of DirNode.cpp
hashExample.cpp : an example on how to use the hash function (and compression) with STL library
the_gerp                : compiled solution of this assignment (good for comparing purposes)
README                  : this file
FSTreeTraversal.cpp     : creats an FSTree with the commandline arguement and prints files and subDirs
StringProcessing.cpp    : gets rid of alphanumeric characters in a string

Compile/Run: compile using "make gerp", run executable with "./gerp [input_
             directory] [output_directory]"

Program Purpose: use a hash table to make a running gerp program

Acknowledgements: mainly worked on this project alone. got some help from the TAs
                  about making my program more efficient and from stackoverflow
                  about hashing.
                  
Data Structures:
     1. First, I have a struct that is called HashNode which is the building
        block for my linked list class. In each HashNode, there is a string (a
        word), a vector of ints (the index of the line that word is found within
        vector allLines), and a pointer to the next HashNode. So, when I query,
        I look for the node word and to print lines, I go through the node's
        where vector for the index of allLines.

     2. I also have a HashLinkedList class which is just a LinkedList made of
        HashNodes.

     3. Then in Hash class. I have a dynamic array of LinkedLists and a vector
        called allLines that holds every line that is read in from all the files.
        The dynamic array expands when the load factor is greater than .80

UnitTesting:
     1. I created a UnitTesting.cpp where I test most of the functions I wrote
        within the LinkedList class and some of the ones I wrote in Hash class.
        I mainly wanted to test if the linking and big three worked for the
        linked list. I also tested if the hash class could insert properly and
        read files correctly and expand correctly.
     2. For testing query related functions, it was easier to just run the
        program to see in the output was correct.
                -@f function tested
                -when there is more than one word queried at once
                -@i case
                -@i case for more than one word at a time

RunTime:
     SmallGutenberg: it takes roughly 10 seconds to index and get to querying
     MediumGutenberg: takes approximately 30-45 seconds
     LargeGutenberg: rougly 7 minutes

Bugs:
    1. i don't know if this counts, but valgrind takes a long time to run
       it does say there are no memory leaks tho (i just don't know why it
       takes so much longer than acutally running the program)
    2. someties when I print out the lines into the outfile, after each line
       there is a ^M in red which I don't really understand. It happens really
       rarely. Almost every time when I run the program and query, it doesn't
       do it, so I don't know.

Also, when I try to run the "the_gerp" it keeps saying
Usage:  gerp directory
            where:  directory is a valid directory
and that's it.
So I'm not sure if my program's output is 100% correct since I couldn't check it.




